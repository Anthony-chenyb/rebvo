# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rebvo/Keyline.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Keyline(genpy.Message):
  _md5sum = "1ae0c73cd497f30da6aa8e3479b24957"
  _type = "rebvo/Keyline"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[2] KlGrad		#KeyLine's gradient vector [x,y]

float32[2] KlImgPos		#KeyLine's image position [x,y]

float64 invDepth		#Estimated Inverse Depth
float64 invDepthS		#Estimated Inverse Depth Uncertainty

float32[2] KlFocPos		#KL position in focal point centred coordinates (plane at focal length zf) [x,y]

int32 KlMatchID			#Id of the matching keyline

int32 ConsMatch			#number of consecutive matches

int16 KlPrevMatchID		#Id of previous consecutive KeyLine
int16 KlNextMatchID		#Id of next consecutive KeyLine"""
  __slots__ = ['KlGrad','KlImgPos','invDepth','invDepthS','KlFocPos','KlMatchID','ConsMatch','KlPrevMatchID','KlNextMatchID']
  _slot_types = ['float32[2]','float32[2]','float64','float64','float32[2]','int32','int32','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       KlGrad,KlImgPos,invDepth,invDepthS,KlFocPos,KlMatchID,ConsMatch,KlPrevMatchID,KlNextMatchID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Keyline, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.KlGrad is None:
        self.KlGrad = [0.,0.]
      if self.KlImgPos is None:
        self.KlImgPos = [0.,0.]
      if self.invDepth is None:
        self.invDepth = 0.
      if self.invDepthS is None:
        self.invDepthS = 0.
      if self.KlFocPos is None:
        self.KlFocPos = [0.,0.]
      if self.KlMatchID is None:
        self.KlMatchID = 0
      if self.ConsMatch is None:
        self.ConsMatch = 0
      if self.KlPrevMatchID is None:
        self.KlPrevMatchID = 0
      if self.KlNextMatchID is None:
        self.KlNextMatchID = 0
    else:
      self.KlGrad = [0.,0.]
      self.KlImgPos = [0.,0.]
      self.invDepth = 0.
      self.invDepthS = 0.
      self.KlFocPos = [0.,0.]
      self.KlMatchID = 0
      self.ConsMatch = 0
      self.KlPrevMatchID = 0
      self.KlNextMatchID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_2f.pack(*self.KlGrad))
      buff.write(_struct_2f.pack(*self.KlImgPos))
      _x = self
      buff.write(_struct_2d.pack(_x.invDepth, _x.invDepthS))
      buff.write(_struct_2f.pack(*self.KlFocPos))
      _x = self
      buff.write(_struct_2i2h.pack(_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      self.KlGrad = _struct_2f.unpack(str[start:end])
      start = end
      end += 8
      self.KlImgPos = _struct_2f.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.invDepth, _x.invDepthS,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 8
      self.KlFocPos = _struct_2f.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID,) = _struct_2i2h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.KlGrad.tostring())
      buff.write(self.KlImgPos.tostring())
      _x = self
      buff.write(_struct_2d.pack(_x.invDepth, _x.invDepthS))
      buff.write(self.KlFocPos.tostring())
      _x = self
      buff.write(_struct_2i2h.pack(_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      self.KlGrad = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.KlImgPos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 16
      (_x.invDepth, _x.invDepthS,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 8
      self.KlFocPos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 12
      (_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID,) = _struct_2i2h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_2i2h = struct.Struct("<2i2h")
_struct_2f = struct.Struct("<2f")
