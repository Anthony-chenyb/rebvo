# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rebvo/EdgeMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rebvo.msg
import std_msgs.msg

class EdgeMap(genpy.Message):
  _md5sum = "885ab556237b8cc71cfc39f60b72964e"
  _type = "rebvo/EdgeMap"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header		#KeyLine header

Keyline[] Keylines	#EdgeMap (KeyLines detected)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: rebvo/Keyline
float32[2] KlGrad		#KeyLine's gradient vector [x,y]

float32[2] KlImgPos		#KeyLine's image position [x,y]

float64 invDepth		#Estimated Inverse Depth
float64 invDepthS		#Estimated Inverse Depth Uncertainty

float32[2] KlFocPos		#KL position in focal point centred coordinates (plane at focal length zf) [x,y]

int32 KlMatchID			#Id of the matching keyline

int32 ConsMatch			#number of consecutive matches

int16 KlPrevMatchID		#Id of previous consecutive KeyLine
int16 KlNextMatchID		#Id of next consecutive KeyLine"""
  __slots__ = ['header','Keylines']
  _slot_types = ['std_msgs/Header','rebvo/Keyline[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Keylines

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EdgeMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Keylines is None:
        self.Keylines = []
    else:
      self.header = std_msgs.msg.Header()
      self.Keylines = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.Keylines)
      buff.write(_struct_I.pack(length))
      for val1 in self.Keylines:
        buff.write(_struct_2f.pack(*val1.KlGrad))
        buff.write(_struct_2f.pack(*val1.KlImgPos))
        _x = val1
        buff.write(_struct_2d.pack(_x.invDepth, _x.invDepthS))
        buff.write(_struct_2f.pack(*val1.KlFocPos))
        _x = val1
        buff.write(_struct_2i2h.pack(_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Keylines is None:
        self.Keylines = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Keylines = []
      for i in range(0, length):
        val1 = rebvo.msg.Keyline()
        start = end
        end += 8
        val1.KlGrad = _struct_2f.unpack(str[start:end])
        start = end
        end += 8
        val1.KlImgPos = _struct_2f.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.invDepth, _x.invDepthS,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        val1.KlFocPos = _struct_2f.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID,) = _struct_2i2h.unpack(str[start:end])
        self.Keylines.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.Keylines)
      buff.write(_struct_I.pack(length))
      for val1 in self.Keylines:
        buff.write(val1.KlGrad.tostring())
        buff.write(val1.KlImgPos.tostring())
        _x = val1
        buff.write(_struct_2d.pack(_x.invDepth, _x.invDepthS))
        buff.write(val1.KlFocPos.tostring())
        _x = val1
        buff.write(_struct_2i2h.pack(_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Keylines is None:
        self.Keylines = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Keylines = []
      for i in range(0, length):
        val1 = rebvo.msg.Keyline()
        start = end
        end += 8
        val1.KlGrad = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
        start = end
        end += 8
        val1.KlImgPos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
        _x = val1
        start = end
        end += 16
        (_x.invDepth, _x.invDepthS,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        val1.KlFocPos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
        _x = val1
        start = end
        end += 12
        (_x.KlMatchID, _x.ConsMatch, _x.KlPrevMatchID, _x.KlNextMatchID,) = _struct_2i2h.unpack(str[start:end])
        self.Keylines.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_2i2h = struct.Struct("<2i2h")
_struct_3I = struct.Struct("<3I")
_struct_2f = struct.Struct("<2f")
