// Generated by gencpp from file rebvo/EdgeMap.msg
// DO NOT EDIT!


#ifndef REBVO_MESSAGE_EDGEMAP_H
#define REBVO_MESSAGE_EDGEMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rebvo/Keyline.h>

namespace rebvo
{
template <class ContainerAllocator>
struct EdgeMap_
{
  typedef EdgeMap_<ContainerAllocator> Type;

  EdgeMap_()
    : header()
    , Keylines()  {
    }
  EdgeMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Keylines(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::rebvo::Keyline_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rebvo::Keyline_<ContainerAllocator> >::other >  _Keylines_type;
  _Keylines_type Keylines;




  typedef boost::shared_ptr< ::rebvo::EdgeMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rebvo::EdgeMap_<ContainerAllocator> const> ConstPtr;

}; // struct EdgeMap_

typedef ::rebvo::EdgeMap_<std::allocator<void> > EdgeMap;

typedef boost::shared_ptr< ::rebvo::EdgeMap > EdgeMapPtr;
typedef boost::shared_ptr< ::rebvo::EdgeMap const> EdgeMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rebvo::EdgeMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rebvo::EdgeMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rebvo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rebvo': ['/home/juan/git/rebvo/ros/src/rebvo_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rebvo::EdgeMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rebvo::EdgeMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rebvo::EdgeMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rebvo::EdgeMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rebvo::EdgeMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rebvo::EdgeMap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rebvo::EdgeMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "885ab556237b8cc71cfc39f60b72964e";
  }

  static const char* value(const ::rebvo::EdgeMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x885ab556237b8cc7ULL;
  static const uint64_t static_value2 = 0x1cfc39f60b72964eULL;
};

template<class ContainerAllocator>
struct DataType< ::rebvo::EdgeMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rebvo/EdgeMap";
  }

  static const char* value(const ::rebvo::EdgeMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rebvo::EdgeMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header		#KeyLine header\n\
\n\
Keyline[] Keylines	#EdgeMap (KeyLines detected)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rebvo/Keyline\n\
float32[2] KlGrad		#KeyLine's gradient vector [x,y]\n\
\n\
float32[2] KlImgPos		#KeyLine's image position [x,y]\n\
\n\
float64 invDepth		#Estimated Inverse Depth\n\
float64 invDepthS		#Estimated Inverse Depth Uncertainty\n\
\n\
float32[2] KlFocPos		#KL position in focal point centred coordinates (plane at focal length zf) [x,y]\n\
\n\
int32 KlMatchID			#Id of the matching keyline\n\
\n\
int32 ConsMatch			#number of consecutive matches\n\
\n\
int16 KlPrevMatchID		#Id of previous consecutive KeyLine\n\
int16 KlNextMatchID		#Id of next consecutive KeyLine\n\
";
  }

  static const char* value(const ::rebvo::EdgeMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rebvo::EdgeMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Keylines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EdgeMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rebvo::EdgeMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rebvo::EdgeMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Keylines[]" << std::endl;
    for (size_t i = 0; i < v.Keylines.size(); ++i)
    {
      s << indent << "  Keylines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rebvo::Keyline_<ContainerAllocator> >::stream(s, indent + "    ", v.Keylines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REBVO_MESSAGE_EDGEMAP_H
